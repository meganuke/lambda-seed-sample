service: user-service
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 512
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  vpc:
    securityGroupIds: ${env:SECURITY_GROUP_ID, ''}
    subnetIds:
      - ${env:SUBNET_A_ID, ''}
      - ${env:SUBNET_B_ID, ''}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:AttachNetworkInterface
      Resource: '*'
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: '*'
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: '*'

  environment:
    PGHOST: ${env:PGHOST, ''}
    PGUSER: ${env:PGUSER, ''}
    PGPASSWORD: ${env:PGPASSWORD, ''}
    PGDATABASE: ${env:PGDATABASE, ''}
    PGPORT: ${env:PGPORT, ''}
    USE_SECRETS_MANAGER: ${env:USE_SECRETS_MANAGER, 'false'}
    COGNITO_POOL_ID: ${env:COGNITO_POOL_ID, ''}

functions:
  #----------------- User Crud ---------------
  user-find:
    handler: src/handler/user-handler.find
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}
  user-find-one:
    handler: src/handler/user-handler.findOne
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}
  user-create:
    handler: src/handler/user-handler.create
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: ${self:custom.authorizer}
  user-update:
    handler: src/handler/user-handler.update
    events:
      - http:
          path: users/{id}
          method: patch
          cors: true
          authorizer: ${self:custom.authorizer}
  user-delete:
    handler: src/handler/user-handler.deleteuser
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer: ${self:custom.authorizer}

  #----------------- User Password Management ---------------
  users-reset-password:
    handler: src/handler/user-handler.resetPassword
    events:
      - http:
          path: users/{id}/reset-password
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}
  users-set-password:
    handler: src/handler/user-handler.setPassword
    events:
      - http:
          path: users/{id}/set-password
          method: post
          cors: true
          authorizer: ${self:custom.authorizer}
  users-force-logout:
    handler: src/handler/user-handler.forceUserLogout
    events:
      - http:
          path: users/{id}/force-logout
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
  authorizer:
    arn: ${env:AUTHORIZER_ARN, ''}
    identitySource: method.request.header.Authorization

resources:
  Resources:
    GatewayResponse401:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    GatewayResponse403:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '403'

package:
  individually: true
  exclude:
    - test/**

plugins:
  - serverless-esbuild
  - serverless-offline
